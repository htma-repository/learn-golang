// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency_injection

import (
	"database/sql"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"io"
	"learn-golang-dependency-injection/controller"
	"learn-golang-dependency-injection/repository"
	"learn-golang-dependency-injection/service"
	"os"
)

// Injectors from injector.go:

// Injector Dependency Injection
func InitializeSimpleService() (*SimpleService, error) {
	simpleRepository := NewSimpleRepository()
	simpleService, err := NewSimpleService(simpleRepository)
	if err != nil {
		return nil, err
	}
	return simpleService, nil
}

// Injector Dependency Injection with injector params
func InitializeController(db *sql.DB, validator2 *validator.Validate) controller.ProductController {
	productRepository := repository.NewProductRepository()
	productService := service.NewProductService(productRepository, db, validator2)
	productController := controller.NewProductController(productService)
	return productController
}

// Multiple Binding
func InitializeDatabase() *DatabaseRepository {
	databaseMongoDB := NewDatabaseMongoDB()
	databaseMySQL := NewDatabaseMySQL()
	databaseRepository := NewDatabaseRepository(databaseMongoDB, databaseMySQL)
	return databaseRepository
}

// Provider set
func InitializeFooBar() *FooBarService {
	fooRepository := NewFooRepository()
	fooService := NewFooService(fooRepository)
	barRepository := NewBarRepository()
	barService := NewBarService(barRepository)
	fooBarService := NewFooBarService(fooService, barService)
	return fooBarService
}

// Binding Interface
func InitializeProductService() *ProductService {
	productImpl := NewProductImpl()
	productService := NewProductService(productImpl)
	return productService
}

// Struct Provider (rarely used)
func InitializeFooBarStruct() *NewFooBar {
	foo := NewFoo()
	bar := NewBar()
	newFooBar := &NewFooBar{
		Foo: foo,
		Bar: bar,
	}
	return newFooBar
}

// Binding Value (Struct)
func InitializeFooBarUsingValueStruct() *NewFooBar {
	foo := _wireFooValue
	bar := _wireBarValue
	newFooBar := &NewFooBar{
		Foo: foo,
		Bar: bar,
	}
	return newFooBar
}

var (
	_wireFooValue = fooValue
	_wireBarValue = barValue
)

// Binding Value (Interface)
func InitializeFooBarUsingValueInterface() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

// Struct Field Provider
func InitializeSmartphoneSamsung() *Smartphone {
	samsung := NewSamsung()
	smartphone := samsung.Smartphone
	return smartphone
}

// Cleanup Function
func InitializeConnection(name string) (*Connection, func()) {
	file, cleanup := NewFile(name)
	connection, cleanup2 := NewConnection(file)
	return connection, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

var fooSet = wire.NewSet(NewFooService, NewFooRepository)

var barSet = wire.NewSet(NewBarService, NewBarRepository)

var ProductSet = wire.NewSet(
	NewProductImpl, wire.Bind(new(IProduct), new(*ProductImpl)),
)

var fooValue = &Foo{}

var barValue = &Bar{}
